<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java8 | iostreamin's Blog]]></title>
  <link href="http://xeostream.github.io/blog/categories/java8/atom.xml" rel="self"/>
  <link href="http://xeostream.github.io/"/>
  <updated>2015-05-27T23:15:30+08:00</updated>
  <id>http://xeostream.github.io/</id>
  <author>
    <name><![CDATA[iostreamin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8入门]]></title>
    <link href="http://xeostream.github.io/blog/2015/05/17/java8/"/>
    <updated>2015-05-17T21:41:09+08:00</updated>
    <id>http://xeostream.github.io/blog/2015/05/17/java8</id>
    <content type="html"><![CDATA[<p>Java 8发布已经有一段时间了，总体上说Java 8本身是很有诚意的，带来了很多变化。从目前来看，各大Java开源社区和开源软件对Java 8还是比较欢迎的。Spring在Java 8发布后就推出了兼容Java 8的新版本。从开源软件和开发人员的反馈来看，Java 8应该会逐渐替代旧版本成为Java开发的新基石。</p>

<!-- more -->


<p>Java 8的更新给Java应用带来了很多显著的变化。主要更新包括<strong>Lambda表达式</strong>、<strong>接口的默认方法和静态方法</strong>、<strong>方法引用</strong>、<strong>Java库的新特性-Optional，Stream，日期时间API</strong>、<strong>并行运算</strong>等等，这些更新解决了Java本身固有的一些缺陷，也带来了更加有效的API。</p>

<h2>Lambda表达式</h2>

<p>Lambda表达式（闭包）是Java 8中最显著的更新，Lambda的概念是将一段代码作为参数传给方法，在方法中执行，这种概念在脚本语言如Python中应用十分普遍，即使在基于JVM的一些语言也支持Lambda表达式，但是Java程序中只能通过匿名内部类来替代Lambda的作用。</p>

<p>Lambda表达式的格式非常紧凑，最简单的Lambda表达式可以由<strong>逗号分隔的参数列表</strong>、<strong>->运算符</strong> 和 <strong>功能语句块</strong>组成。示例如下：
<code>java
Arrays.asList("a", "b", "d").forEach(s -&gt; System.out.println(s));
</code>
在参数列表中可以不声明参数类型，编译器会根据上下文判断参数类型，或者也可以显式的指定参数类型。
<code>java
Arrays.asList("a", "b", "d").forEach((String s) -&gt; System.out.println(s));
</code>
Lambda表达式中如果语句块过于复杂，也可以通过大括号包起来使结构清晰，Lambda表达式可以引用外部变量，而且Lambda表达式同样可以有返回值，编译器会根据上下文推断返回值的类型，所以我个人理解Lambda表达式其实就是匿名的方法。</p>

<p>如果Lambda表达式仅仅是上面的应用场景，估计很多同学会觉得Lambda表达式的作用就是精简代码，作为Java 8的重大更新未免言过其实。事实上，Lambda表达式的作用是很大的，除了精简代码、并行处理支持CPU多核运算、有利于JIT编译器优化代码外，还有传递行为的特性。</p>

<p>Java死板的接口规范降低了开发人员的入门难度，但很大的副作用是限制了使用场景，不便扩展。就像代码所示：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 计算数组元素之和</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumAll</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">sumAll</span><span class="o">()</span><span class="err">`</span><span class="n">方法很简单</span><span class="err">，</span><span class="n">计算数组中所有元素的和</span><span class="err">，</span><span class="n">然后我们增加了一个需求</span><span class="o">-</span><span class="n">计算数组中所有偶数的和</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="c1">// 计算数组中所有偶数之和</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumAllEven</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">后来又增加了一个需求</span><span class="err">，</span><span class="n">计算数组中所有大于3的元素的和</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="c1">// 计算数组中所有大于3的元素之和</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumMoreThan3</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">上述需求都很类似</span><span class="err">，</span><span class="n">不难发现</span><span class="err">，</span><span class="n">三处实现代码中出现了很明显的代码重复现象</span><span class="err">，</span><span class="n">三处代码唯一的区别就在if判断的条件不同</span><span class="err">。</span><span class="n">如果要处理这种情况</span><span class="err">，</span><span class="n">一般方式是通过策略模式重构代码以规避代码重复</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">*</span> <span class="n">策略模式</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Strategy</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">SumAllStrategy</span> <span class="kd">implements</span> <span class="n">Strategy</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">SumAllEvenStrategy</span> <span class="kd">implements</span> <span class="n">Strategy</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Strategy</span> <span class="n">strategy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Solution</span><span class="o">(</span><span class="n">Strategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumAll</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">strategy</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">number</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 调用</span>
</span><span class='line'><span class="n">Solution</span> <span class="n">solution</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Solution</span><span class="o">(</span><span class="n">strategy</span><span class="o">);</span>
</span><span class='line'><span class="n">solution</span><span class="o">.</span><span class="na">sumAll</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">策略模式成功地解决了代码重复的问题</span><span class="err">，</span><span class="n">但通过设计模式来解决这样的小问题未免让人觉得小题大做</span><span class="err">，</span><span class="n">不是很方便</span><span class="err">。</span><span class="n">现在有了Lambda表达式</span><span class="err">，</span><span class="n">我们可以这样做</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="c1">// Lambda表达式</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumAll</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">,</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">number</span><span class="o">))</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sumAll</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="kc">true</span><span class="o">);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">sumAll</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">sumAll</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>
策略模式的解决方案就像是传统的Java开发方法，代码冗长复杂；而Lambda的解决方法更像是C++的风格，代码简洁明了，开发起来如沐春风。毫不夸张地说，传递行为的特性给Java的使用带来了更多的可能，从此以后像使用函数语言那样使用Java不再是梦。</p>

<h3>函数式接口</h3>

<p> 因为在Java 8中引入了函数式编程的理念，所以Java 8中增加了函数式接口的概念，函数式接口是指接口中只有一个抽象方法，Java 8有个注解专门表示函数式接口-<code>@FunctionalInterface</code>。函数式接口中的一个抽象方法的限制不针对下文中提到的默认方法和静态方法。</p>

<p>为避免开发人员因为使用Lambda表达式而重复开发函数式接口，Java 8内置了一些通用的函数式接口，包括<code>Predicate</code>、<code>Function</code>、<code>Consumer</code>等。</p>

<p><code>Predicate&lt;T&gt;</code>：将T作为输入，返回一个布尔值作为输出，该接口包含多种默认方法将<code>Predicate</code>组合成其他复杂的逻辑。</p>

<pre><code class="java">Predicate predicate = (s) -&gt; s.length() &gt; 0;

predicate.test("foo");              // true
predicate.negate().test("foo");     // false

Predicate nonNull = Objects::nonNull;
Predicate isNull = Objects::isNull;

Predicate isEmpty = String::isEmpty;
Predicate isNotEmpty = isEmpty.negate();
</code></pre>

<p><code>Function&lt;T, R&gt;</code>：将T作为输入，返回R作为输出，默认方法可被用来将多个函数链接（compose、andThen）</p>

<pre><code class="java">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;
Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);

backToString.apply("123");     // "123"
</code></pre>

<p><code>Consumer&lt;T&gt;</code>：将T作为输入，不返回任何内容，表示在单个参数上的操作</p>

<pre><code class="java">Consumer greeter = (p) -&gt; System.out.println("Hello, " + p);

greeter.accept("Skywalker");
</code></pre>

<h2>接口的默认方法和静态方法</h2>

<p> 在Java 8之前，接口中的方法必须都是没有实现的抽象方法；但是在Java 8中，接口的行为有了很显著的变化。首先接口中支持实现的方法-默认方法，默认方法是已经实现的方法，将默认方法加入接口中需要在方法名前加入default关键字，这样实现接口的子类，可以直接使用默认方法，或者根据需求重写默认方法的实现。代码如下：
<code>java
private interface Defaulable {
    // Interfaces now allow default methods, the implementer may or
    // may not implement (override) them.
    default String notRequired() {
        return "Default implementation";
    }
}
private static class DefaultableImpl implements Defaulable {
}
private static class OverridableImpl implements Defaulable {
    @Override
    public String notRequired() {
        return "Overridden implementation";
    }
}
</code>
接口Defaultable中声明了一个默认方法notRequired()，实现类DefaultableImpl没有重写默认方法，而OverridableImpl实现类重写了默认方法，这两种方式在Java 8中都是语法正确的。</p>

<p>如果能够理解在接口中增加默认方法的话，那么理解接口中增加已实现的static方法应该也是没有问题的。
<code>java
private interface DefaulableFactory {
    // Interfaces now allow static methods
    static Defaulable create(Supplier&lt;Defaulable&gt; supplier) {
        return supplier.get();
    }
}
</code>
 官方宣称JVM平台的接口中默认方法实现是很高效的，并且方法调用的字节码指令支持默认方法，默认方法使已存在的接口可以修改而不会影响编译的过程，Java 8的java.util.Collection中增加的额外方法比如：stream(),forEach(),removeIf()等就是很好的例子。尽管默认方法很强大，但是在使用之前一定要考虑到在实际的工业环境中，由于类之间多重的实现和继承关系的情况下，默认方法会不会导致额外的代价。</p>

<h2>方法引用</h2>

<p>方法引用提供了一种方式直接访问类或者实例已经存在的方法或者构造方法。方法引用结合Lambda表达式可以使语法结构更紧凑简洁。方法引用分为四种方式。</p>

<ul>
<li><strong>构造方法引用</strong>，语法是<code>Class::new</code>，对于泛型则是<code>Class&lt;T&gt;::new</code>；</li>
<li><strong>静态方法引用</strong>，语法是<code>Class::static_method</code>；</li>
<li><strong>类实例方法的引用</strong>，语法是<code>Class::method</code>；</li>
<li><strong>类的实例引用实例方法</strong>，语法是<code>instance::method</code>。</li>
</ul>


<p>方法引用可以取代简单的Lambda表达式，使得代码结构更清晰，提高代码可读性。感兴趣的同学可以参考<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">官方文档</a>。</p>

<h2>Java库的新特性</h2>

<p>除了Lambda表达式之外，Java 8中最让人期待的就是Java库修改及新增的新特性。在这些新增的新特性中，有一些非常好的API，首先是<strong>Optional</strong>，Optional是Java为解决判断null而加入的；然后是<strong>Stream</strong> ，Stream是非常强大的扩展，与Lambda结合一起使用会有更好的效果；最后是<strong>日期时间API</strong>，这个是广大Java开发人员期盼已久的事情。</p>

<h3>Optional</h3>

<p>NullPointerException是程序开发中最常见的bug，而Optional最早是Google Guava项目中引入以解决空指针异常的一种方式，Guava项目不赞成代码被判断null的代码污染，期望程序员写更整洁的代码，而现在Optional正式成为Java 8的一部分。</p>

<p>Optional是一个容器，可以保存一些类型的变量或者null。它提供了很多有用的方法，将空指针判断的非常优雅，代码实例如下：
<code>java
Optional&lt;String&gt; fullName = Optional.ofNullable(null);
System.out.println("Full Name is set? " + fullName.isPresent());      
System.out.println("Full Name: " + fullName.orElseGet(() -&gt; "[none]"));
System.out.println(fullName.map(s -&gt; "Hey " + s + "!").orElse("Hey Stranger!"));
</code>
Optional实例有非空的值，方法<code>isPresent()</code>返回<code>true</code>否则就是<code>false</code>。方法<code>orElseGet()</code>提供了回退机制，当Optional实例的值为空时，返回默认值。方法<code>map()</code>转化当前Optional的值并返回新的Optional实例，<code>orElse()</code>方法类似于<code>orElseGet()</code>，但是它不接受方法，只接受一个默认值。</p>

<h3>Stream</h3>

<p>新增加的Stream API为Java引入了有实际意义的函数式编程，它使得Java程序不再臃肿，大大提高开发效率。Stream只能操作Collection，不支持Map。Stream运算分为中间的（intermediate）、末端的（terminal），中间运算返回Stream自身，末端运算返回具有特定类型的结果。Stream中包括<code>filter</code>、<code>sorted</code>、<code>map</code>、<code>count</code>、<code>reduce</code>等。接口规范如下：</p>

<ul>
<li><code>filter</code>，接收一个<code>Predicate</code>来过滤流中所有的元素，为中间运算，可以在过滤结果上调用其他stream运算。</li>
<li><code>sorted</code>，是一个返回流的排序视图的中间运算。如果不传递定制的<code>Comparator</code>，元素将以自然排序方式进行排序。</li>
<li><code>map</code>，将每个元素通过给定的函数转变为其他对象。</li>
<li><code>reduce</code>，使用给定的函数对流的元素进行一个减缩运算。结果是一个保存有减缩值的Optional。</li>
<li><code>parallelStream</code>，返回的也是流对象，不过是并行流，可以更好的利用多核CPU的硬件优势，减少运算时间。</li>
</ul>


<p>为了说明Stream的用法，通过一些代码实例说明：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Streams</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">enum</span> <span class="n">Status</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OPEN</span><span class="o">,</span> <span class="n">CLOSED</span>
</span><span class='line'>    <span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Task</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Status</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Task</span><span class="o">(</span><span class="kd">final</span> <span class="n">Status</span> <span class="n">status</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">points</span> <span class="o">=</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getPoints</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Status</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[%s, %d]&quot;</span><span class="o">,</span> <span class="n">status</span><span class="o">,</span> <span class="n">points</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">初始化Task数据</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">tasks</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Task</span><span class="o">(</span><span class="n">Status</span><span class="o">.</span><span class="na">OPEN</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Task</span><span class="o">(</span><span class="n">Status</span><span class="o">.</span><span class="na">OPEN</span><span class="o">,</span> <span class="mi">13</span><span class="o">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Task</span><span class="o">(</span><span class="n">Status</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>
然后是针对上述代码的提出几个要解决的问题，我会试着使用Stream API解决这些问题，在看到代码的时候，就会知道Stream的强大。</p>

<p>计算所有开放的Task的点数和</p>

<pre><code class="java">// Calculate total points of all active tasks using sum()
final long totalPointsOfOpenTasks = tasks
    .stream()
    .filter(task -&gt; task.getStatus() == Status.OPEN)
    .mapToInt(Task::getPoints)
    .sum();

System.out.println("Total points: " + totalPointsOfOpenTasks);
</code></pre>

<p>console的输出：<code>Total points: 18</code></p>

<p>并行处理计算Task的点数和</p>

<pre><code class="java">// Calculate total points of all tasks
final double totalPoints = tasks
   .stream()
   .parallel()
   .map(task -&gt; task.getPoints()) // or map(Task::getPoints) 
   .reduce(0, Integer::sum);

System.out.println("Total points (all tasks): " + totalPoints);
</code></pre>

<p>console的输出：<code>Total points (all tasks): 26.0</code></p>

<p>对Task集合中的元素进行分组</p>

<pre><code class="java">// Group tasks by their status
final Map&lt;Status, List&lt;Task&gt;&gt; map = tasks
    .stream()
    .collect(Collectors.groupingBy(Task::getStatus));
System.out.println(map);
</code></pre>

<p>console的输出：<code>{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}</code></p>

<p>计算整个集合中每个Task分数的平均值</p>

<pre><code class="java">// Calculate the weight of each tasks (as percent of total points)
final Collection&lt;String&gt; result = tasks
    .stream()                                        // Stream&lt;String&gt;
    .mapToInt(Task::getPoints)                       // IntStream
    .asLongStream()                                  // LongStream
    .mapToDouble(points -&gt; points / totalPoints)     // DoubleStream
    .boxed()                                         // Stream&lt;Double&gt;
    .mapToLong(weigth -&gt; (long)(weigth * 100))       // LongStream
    .mapToObj(percentage -&gt; percentage + "%")        // Stream&lt;String&gt;
    .collect(Collectors.toList());                   // List&lt;String&gt;

System.out.println(result);
</code></pre>

<p>console的输出：<code>[19%, 50%, 30%]</code></p>

<h3>时间日期API</h3>

<hr />

<p>在Java 8之前，Java的Date库非常不好用，在开发过程中总是会有一些莫名其妙的问题，这次Java 8中引入了<a href="https://github.com/JodaOrg/joda-time">Joda-Time</a>的精华，对原有的接口做了很多调整，也增加了新的一些实用的接口。新增的时间处理类包括：</p>

<ul>
<li><code>LocalTime</code>，保存ISO-8601日期系统的时间部分，不保存时区信息；</li>
<li><code>LocalDate</code>，保存ISO-8601日期系统的日期部分，且保存时区信息；</li>
<li><code>LocalDateTime</code>，保存ISO-8601日期系统的日期和时间，不保存时区信息；</li>
<li><code>ZonedDateTime</code>，保存ISO-8601日期系统的日期和时间，且保存时区信息；</li>
<li><code>Duration</code>，可以精确计算两个日期之间的时间差。</li>
</ul>


<p>Java 8这次时间日期API的改动还是很不错的，关于时间API的变动的详细信息请参考<a href="http://docs.oracle.com/javase/tutorial/datetime/index.html">官方文档</a>。</p>

<h2>并行数组</h2>

<p>Java 8新增加了很多方法支持并行的数组处理。最明显的是<code>parallelSort()</code>方法，在多核计算机上，<code>parallelSort()</code>方法可以显著的提高排序的速度。</p>

<p>Java 8给开发人员带来了很多可以提高生产力的特性，不过Java 8刚发布不久，现在还不适合将生产环境迁移到Java 8，但是我们可以在开发过程中尽量少的使用与Java 8不兼容的代码和第三方库。Java 8引入了很多<a href="https://github.com/google/guava">Google Guava</a>的特性，如果想要在开发过程中体验Java 8的新特性，建议在开发中引入<a href="http://mvnrepository.com/artifact/com.google.guava/guava/18.0">Google Guava</a>库。</p>

<h2>参考</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Java 8方法引用</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/datetime/index.html">Java 8时间API</a></li>
<li><a href="http://ifeve.com/java-8-features-tutorial/">Java 8特性</a></li>
<li><a href="http://developer.51cto.com/art/201304/387681_all.htm">Java 8为什么需要Lambda表达式</a></li>
<li><a href="http://blog.csdn.net/wwwsssaaaddd/article/details/37573517">Java8 - 方法引用(method referrance)</a></li>
<li><a href="https://github.com/google/guava">Google Guava</a></li>
<li><a href="https://github.com/JodaOrg/joda-time">Joda-Time</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
