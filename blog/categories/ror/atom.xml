<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ror | iostreamin's Blog]]></title>
  <link href="http://xeostream.github.io/blog/categories/ror/atom.xml" rel="self"/>
  <link href="http://xeostream.github.io/"/>
  <updated>2015-05-27T23:15:30+08:00</updated>
  <id>http://xeostream.github.io/</id>
  <author>
    <name><![CDATA[iostreamin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coreseek配置rails项目全文搜索]]></title>
    <link href="http://xeostream.github.io/blog/2013/03/26/rails-coreseek/"/>
    <updated>2013-03-26T22:07:00+08:00</updated>
    <id>http://xeostream.github.io/blog/2013/03/26/rails-coreseek</id>
    <content type="html"><![CDATA[<p>rails是ruby的web框架，由于rails框架的易用性，近几年出现了很多基于rails的网站，随着网站的发展，积累的数据会越来越多，有的时候我们可能要给网站升级，比如增加全文搜索功能，那就要用到我们说到的coreseek软件，coreseek是一款中文全文检索软件，coreseek本身是基于sphinx开发的，接下来介绍coreseek的安装与配置(需要安装包的可以给我留言)。</p>

<!--more-->


<h2>安装coreseek</h2>

<p>1.首先在安装coreseek之前，配置环境，安装编译需要的一些软件，运行命令:
<code>sh
sudo su
apt-get install make gcc g++ automake libtool mysql-client libmysqlclient15-dev libxml2-dev libexpat1-dev
</code>
2.bash中进入解压好的文件夹下，可以看到csft%文件夹和mmseg%文件夹等，首先要安装mmseg，如果成功之后，继续安装csft。<br>
3.进入mmseg文件夹中，开始安装mmseg，执行命令：
<code>sh
./bootstrap
./configure --prefix=path #path为mmseg的安装目录，例/usr/local/bin/mmseg3等
make
make install
cd ..
</code>
4.进入csft文件夹下，执行命令：
<code>sh   
sh buildconf.sh
./configure --prefix=/usr/local/bin/coreseek --without-unixodbc --with-mmseg --with-mmseg-includes=/usr/local/bin/mmseg3/include/mmseg/ --with-mmseg-libs=/usr/local/bin/mmseg3/lib/ --with-mysql #
第一个prefix参数值将做为coreseek的安装目录，之后的参数完全参照mmseg的安装目录进行设置
make
make install
cd ..
</code>
5.测试coreseek是否安装成功，执行如下命令：
<code>sh   
cd testpack
cat var/test/test.xml
/usr/local/bin/mmseg3/bin/mmseg -d /usr/local/bin/mmseg3/etc var/test/test.xml
/usr/local/bin/coreseek/bin/indexer -c etc/csft.conf --all #这里报错段错误，解决:打开csft.conf修改charset_dictpath为uni.lib目录
/usr/local/bin/coreseek/bin/search -c etc/csft.conf 网络 #如果coreseek安装成功，这时应该会返回一定的根据关键字’网络‘搜索到的结果。
</code></p>

<h2>coreseek配置</h2>

<p>coreseek安装成功之后，就是在rails项目中配置coreseek，我们也可以总结为几个步骤。<br>
1.进入rails项目文件夹下config文件夹下新建sphinx.yml,配置文件很重要，需要与安装目录项目对应，配置代码大致如下：
<code>sh
development:
charset_type: zh_cn.utf-8
charset_dictpath: /usr/local/coreseek/var/data/
bin_path: /usr/local/bin
searchd_binary_name: searchd
indexer_binary_name: indexer
...
</code>
2.在bash中，cd到当前rails项目目录下，运行命令：
<figure class='code'><figcaption><span><br/></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake ts:index <span class="c">#为配置的model建立索引</span>
</span><span class='line'>如果有报段错误之类的，这说明之前生成的中文字典出现问题，需要重新生成中文字典，在bash中重新进入到mmseg/data文件夹下&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;python build_unigram.py char.stat.txt Lexicon_full_words.txt &gt; unigram.txt
</span><span class='line'>mmseg -u unigram.txt <span class="c">#此命令会生成unigram.txt.uni</span>
</span><span class='line'>&lt;code&gt;
</span><span class='line'>将生成的unigram.txt.uni重命名为uni.lib,将其复制到coreseek的安装目录/var/data/<span class="p">&amp;</span>lt<span class="p">;</span>br<span class="p">&amp;</span>gt<span class="p">;</span>
</span><span class='line'>再次运行命令:
</span><span class='line'>&lt;/code&gt;sh
</span><span class='line'>rake ts:index
</span><span class='line'>&lt;code&gt;
</span><span class='line'>配置的model的索引应该就成功建立。<span class="p">&amp;</span>lt<span class="p">;</span>br<span class="p">&amp;</span>gt<span class="p">;</span>
</span><span class='line'>3.开启coreseek服务，可以在rails项目的console下运行search方法进行全文检索。
</span><span class='line'>&lt;/code&gt;sh
</span><span class='line'>rake ts:start
</span></code></pre></td></tr></table></div></figure>   <br/>
这些天一直在看coreseek配置，由于coreseek的官网无法访问，所以其中曲折只有亲身体会才会知道，本人才疏学浅，如有异议，还请不吝赐教。  <br/>
<a href="http://xeostream.github.com/blog/2013/03/26/rails-coreseek">版权所有</a>，欢迎转载注明出处与作者。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyOnRails学习之rails框架]]></title>
    <link href="http://xeostream.github.io/blog/2013/03/16/rubyonrails-one/"/>
    <updated>2013-03-16T17:58:00+08:00</updated>
    <id>http://xeostream.github.io/blog/2013/03/16/rubyonrails-one</id>
    <content type="html"><![CDATA[<p>rails是基于MVC的web框架，model对应于active record，controller对应于action controller，view对应于action view。</p>

<!--more-->


<h2>Active record与model</h2>

<p>modle对应的active record 继承于ActiveRecord::Base，类似于Hibernate，原理是利用文件名自动查找对应的业务对象与数据库中的表，由于数据的持久化，在每个表对应的唯一一个active record中声明表中每列的属性，这个过程需要一一对应。建立active record对象有两种方法；一，通过new()方法建立，这种方法声明的active record对象不会提交给数据库，所以无法在数据库中得到体现；二，通过create()方法声明的对象可以做到active record与数据库的同步。声明对象时需要给对象的属性赋值，赋值方法主要为在声明对象的同时传入hash或者是代码块。rails的ORM不需要像Java中SSH的大量配置文件，这要归功于“约定大于配置”理念。rails的数据库的配置需要到项目下config/database.yml中配置，数据库的表名是active record的类名的复数形式，例:catalogs-Catalog，这些可以在ActiveRecord：Base基类提供的方法中设置。</p>

<h2>Action controller与controller</h2>

<p>controller对应的action controller继承于ActionController::Base，每个controller都有一个或者多个action(方法)，action构成所有的业务逻辑，action负责模版绘制，重定向，文本编辑等等。首先视图中的模块通过dispatcher连接到对应的controller，controller的处理过程是获得:action的键值，调用指定的action。每个action对应的模版在app/views/controllername目录下，名字相互对应，如果没有缺省的action和模版，就调用名为index的action，action每次只能完成一次绘制或者重定向。</p>

<h2>Action view与view</h2>

<p>view对应于action view继承于ActionView::Base，而ActionView::Base定义了三种模版。</p>

<blockquote><p>.rhtml文件，ruby代码嵌入html代码中，&lt;% %>是嵌入的ruby处理代码，&lt;=>是要显示的数据。<br>
.rxml文件，生成xml文件。<br>
.rjs文件，通过JavaScriptGenerator的对象page的方法对相应的html文件惊醒修改，这和rails的Ajax有关，之后我们在详细讨论。<br><br>
<a href="http://xeostream.github.com/blog/2013/03/16/rubyonrails-one">版权所有</a>，欢迎转载注明出处与作者。</p></blockquote>
]]></content>
  </entry>
  
</feed>
